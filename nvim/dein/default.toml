[ftplugin] #{{{
c = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal noexpandtab
"}}} '''
cpp = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal noexpandtab
"}}} '''
css = 'setlocal iskeyword+=-'

help = 'setlocal nolist nonumber norelativenumber'

html_javascript = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2
"}}} '''

json = ''' "{{{
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal nocursorcolumn
"}}} '''

python = ''' "{{{
  setlocal tabstop=4
  setlocal softtabstop=4
  setlocal shiftwidth=4

  call delphinus#ale#set_pylintrc()
"}}} '''

ruby = ''' "{{{
  setlocal tabstop=2
  setlocal shiftwidth=2
  setlocal softtabstop=2

  function! s:rspec_syntax_highlight()
    hi def link rubyRailsTestMethod Function
    syn keyword rubyRailsTestMethod describe context it its specify shared_context shared_examples shared_examples_for shared_context include_examples include_context it_should_behave_like it_behaves_like before after around subject fixtures controller_name helper_name scenario feature background given described_class
    syn match rubyRailsTestMethod '\<let\>!\='
    syn keyword rubyRailsTestMethod violated pending expect expect_any_instance_of allow allow_any_instance_of double instance_double mock mock_model stub_model xit
    syn match rubyRailsTestMethod '\.\@<!\<stub\>!\@!'
  endfunction

  autocmd Syntax ruby if ! RailsDetect() | call s:rspec_syntax_highlight() | endif
"}}} '''

toml = 'setlocal foldmethod=marker'

vim = ''' "{{{
  setlocal foldmethod=marker
  setlocal expandtab
  setlocal shiftwidth=2
  setlocal softtabstop=2
  setlocal tabstop=2
"}}} '''
#}}}

# Shougowares and their dependencies {{{
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'
hook_source = '''
" if has('win64')
    let g:vimproc#download_windows_dll = 1
" endif
'''
hook_post_update = '''
  if has('win32')
    let cmd = 'mingw32-make -f make_mingw32.mak'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'delphinus/vim-denite-memo'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'

[[plugins]]
repo = 'rafi/vim-denite-z'

[[plugins]]
repo = 'roxma/nvim-yarp'
hook_add = '''
  " Set path for python3 for python37u packages in CentOS7
  if !executable('python3') && executable('python3.7')
    let g:python3_host_prog = exepath('python3.7')
  endif
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'zchee/deoplete-zsh'
# }}}

# for lightline {{{
[[plugins]]
repo     = 'airblade/vim-gitgutter'
hook_add = ''' "{{{
  set updatetime=100
  let g:gitgutter_diff_args='-w --indent-heuristic'
  let g:gitgutter_highlight_lines = 0
  let g:gitgutter_sign_added='✓'
  let g:gitgutter_sign_modified='⤷'
  let g:gitgutter_sign_removed='✗'
  let g:gitgutter_sign_removed_first_line='↑'
  let g:gitgutter_sign_modified_removed='•'
  let g:gitgutter_terminal_reports_focus=0
"}}} '''
hook_post_source = ''' "{{{
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
"}}} '''

[[plugins]]
repo     = 'delphinus/lightline-delphinus'
depends  = ['lightline', 'ale', 'tagbar', 'vim-gitgutter']
hook_add = ''' "{{{
  let g:use_solarized = 0
  let g:lightline_delphinus_use_powerline_glyphs = 1
  let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
  let g:lightline_delphinus_tagbar_enable = 1
  let g:lightline_delphinus_gitgutter_enable = 1

  function! s:lightline_start() abort
    let g:lightline_delphinus_colorscheme = g:use_solarized || g:colors_name =~# '^solarized' ? 'solarized_improved' : 'nord_improved'
    " execute codes below only after loading lightline because this function
    " will be called BEFORE it. Strange.
    if !get(g:, 'loaded_lightline', 0)
      return
    endif
    let path = dein#get('lightline-delphinus').path
    " source this always to detect 'background'
    execute 'source' path . '/autoload/lightline/colorscheme/' . g:lightline.colorscheme . '.vim'
    let g:lightline.colorscheme = g:lightline_delphinus_colorscheme

    " https://github.com/itchyny/lightline.vim/issues/241#issuecomment-322033789
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
  endfunction

  " s:lightline_start will be called in changing colorscheme or 'background'
  augroup LightlineStart
    autocmd!
    autocmd ColorScheme * call <SID>lightline_start()
  augroup END
"}}} '''

[[plugins]]
repo     = 'itchyny/lightline.vim'

[[plugins]]
repo     = 'majutsushi/tagbar'
hook_add = ''' "{{{
  let g:tagbar_left = 1
  let g:tagbar_autoclose = 1
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 1
  let g:tagbar_iconchars = [nr2char(0xe5ff) . ' ', nr2char(0xe5fe) . ' '] "  , 
  let g:tagbar_autopreview = 1
  augroup TagbarWindow
    autocmd!
    autocmd BufWinEnter * if &previewwindow | setlocal nonumber norelativenumber | endif
  augroup END
  nmap <C-t> :<C-u>TagbarToggle<CR>
"}}} '''

[[plugins]]
repo     = 'w0rp/ale'
#repo     = 'delphinus/ale'
#rev      = 'feature/detect-note-in-mypy'
hook_add = '''
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 1
  let g:ale_echo_msg_format = '%severity%  %linter% - %s'
  "let g:ale_echo_msg_error_str = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_warning_str = nr2char(0xf426) . ' ' " ' '
  "let g:ale_sign_error = nr2char(0xf42d) . ' ' " ' '
  "let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' ' " ' '
  "let g:ale_sign_warning = nr2char(0xf426) . ' ' " ' '
  "let g:ale_statusline_format = [nr2char(0xf42d) . '  %d', nr2char(0xf426) . '  %d', nr2char(0xf4e6) . '  '] " '   '
  let g:ale_echo_msg_error_str = nr2char(0x25b8) " '▸'
  let g:ale_echo_msg_warning_str = nr2char(0x25b9) " '▹'
  let g:ale_echo_msg_info_str = nr2char(0x25b4) " '▴'
  let g:ale_sign_error =  nr2char(0x25b8) " '▸'
  let g:ale_sign_warning =  nr2char(0x25b9) " '▹'
  let g:ale_statusline_format = [nr2char(0x25b8) . ' %d', nr2char(0x25b9) . ' %d', nr2char(0x25b4) . ' '] " '▸▹▴'
  let g:ale_sign_column_always = 1
  let g:ale_fixers = {
        \ 'c': ['clang-format'],
        \ 'cpp': ['clang-format'],
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'eslint' ],
        \ 'python': [ 'autopep8','black', 'isort' ],
        \ 'ruby': [ 'rubocop' ],
        \ 'typescript': [ 'eslint' ],
        \ 'tex': ['textlint'],
        \ }
  let g:ale_linters = {
        \ 'c': ['cpplint'],
        \ 'cpp': ['cpplint'],
        \ 'go': [ 'golangci-lint' ],
        \ 'javascript': [ 'eslint' ],
        \ 'json': [ 'eslint' ],
        \ 'typescript': [ 'eslint', 'tsc' ],
        \ 'perl': [ 'perl' ],
        \ 'vim': [ 'vint' ],
        \ 'python': ['pylint'],
        \ 'tex': ['textlint'],
        \ }
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_go_golangci_lint_package = 1
  let g:ale_python_pylint_change_directory = 0
  let g:ale_python_mypy_options = '--ignore-missing-imports --show-column-numbers --strict'
  let g:ale_python_mypy_detect_notes = 1
  let g:ale_fix_on_save = 1
  let g:ale_sign_column_always = 1
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  " let g:ale_sign_column_always = 1
  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1

  nmap <silent> <A-K> <Plug>(ale_previous_wrap)
  nmap <silent> <A-J> <Plug>(ale_next_wrap)
  augroup DisableALEInDiffBuffers
    autocmd!
    autocmd VimEnter,FilterWritePre * ALEDisableBuffer
  augroup END
  augroup DisableALEInDtsFiles
    autocmd!
    autocmd BufRead,BufNewFile *.d.ts ALEDisableBuffer
    autocmd BufRead,BufNewFile *.d.ts.map ALEDisableBuffer
  augroup END
'''
hook_post_update = '''
  !pip3 install -U --user black vint isort pylint autopep8
  !npm install -g eslint tslint prettier
  !gem install --user-install rubocop
'''
# }}}

# basic {{{
[[plugins]]
repo     = 'airblade/vim-rooter'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

# [[plugins]]
# repo     = 'direnv/direnv.vim'
# repo     = 'delphinus/direnv.vim'
# rev      = 'feature/direnv-export-post'

[[plugins]]
repo     = 'freitass/todo.txt-vim'
hook_add = '''
  let g:todo_load_python = 1
'''

[[plugins]]
repo = 'tpope/vim-surround'
# how to {{{
# 使用可能な引用符など',",[],{},(),その他htmlタグ
# example: 選択した部分を変更する
# S' : 選択したテキストを'で囲む
# S<b> : 選択したテキストを<b>で囲む
# example: 'や{の間にカーソルがある時
# ds': カーソル前後の''を消す
# dst: htmlタグを消す
# cs'": カーソル前後の''を""に置換する
# cs"<b>: カーソル前後の""を<b>に置換する
# example: ノーマルモードでテキスト選択と置換
# ysaw(: 1単語を()で囲む
# This is 'a surrounded text'. -> This is 'a ( surrounded ) text'.
# ysi'(:
# This is 'a surrounded text'. -> This is '( a surrounded text )'.
# ysa'(: This is 'a surrounded text'. -> This is( 'a surrounded text' ).
# }}}

# vim-autoclose
[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'LeafCage/foldCC'
hook_add = '''set foldtext=FoldCCtext()'''

# vim-autosave {{{
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_no_updatetime = 1
let g:auto_save_silent = 1
'''
# }}}

[[plugins]]
repo     = 'kana/vim-submode'
hook_add = ''' "{{{
  call submode#enter_with('DWM_size', 'n', '', '<C-w>>', ':call DWM_GrowMaster()<CR>')
  call submode#enter_with('DWM_size', 'n', '', '<C-w><', ':call DWM_ShrinkMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '>', ':call DWM_GrowMaster()<CR>')
  call submode#map('DWM_size', 'n', '', '<', ':call DWM_ShrinkMaster()<CR>')
"}}} '''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = ''' "{{{
  " U+E287 =>  :
  " U+E601 =>  :
  " U+E60E =>  :
  " U+E769 =>  :
  " U+E7C4 =>  :
  " U+F07B =>  :
  " U+F542 =>  :
  " overwrite setting for 'vue' to use U+F542
  " file-icons
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     nr2char(0xe769),
        \ 'perl':     nr2char(0xe769),
        \ 'sqlite':   nr2char(0xe7c4),
        \ 'tt':       nr2char(0xe60e),
        \ 'txt':      nr2char(0xe601),
        \ 'vue':      nr2char(0xf542),
        \ 'html':     '',
        \ 'css':      '',
        \ 'md':       ''
        \ }
  " vim-devicons
  let g:webdevicons_conceal_nerdtree_brackets = 1
  let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

  " dir-icons
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  let g:DevIconsEnableFoldersOpenClose = 1
  let g:DevIconsDefaultFolderOpenSymbol = ''
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = nr2char(0xe287)
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = nr2char(0xf07b)
"}}} '''

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = ''' "{{{
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
  nnoremap gs :Gstatus<CR>
  nnoremap gc :Gbrowse<CR>
  vnoremap gc :Gbrowse<CR>
  nnoremap gd :Gdiff<CR>
  nnoremap gb :Gblame<CR>
  nnoremap gl :Glog<CR>
"}}} '''

[[plugins]]
repo    = 'tpope/vim-rhubarb'
depends = ['fugitive']
# setting exists in .vimrc-local

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo     = 'wincent/terminus'

[[plugins]]  # j,k キーでカーソル移動の高速化
repo = 'rhysd/accelerated-jk'
hook_add = '''
" j,kにキーマッピング
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''
# }}}

# colorscheme {{{
[[plugins]] # カラースキーマ
repo = 'tomasr/molokai'
[[plugins]]
repo = 'raphamorim/lucario'
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  autocmd MyAutoCmd ColorScheme * highlight Normal ctermbg=none
  autocmd MyAutoCmd ColorScheme * highlight LineNr ctermbg=none
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  if has('win64')
    autocmd MyAutoCmd vimenter * nested colorscheme iceberg
  elseif has('unix')
    autocmd MyAutoCmd vimenter * nested colorscheme lucario
  endif
'''

[[plugins]]
#repo     = 'lifepillar/vim-solarized8'
repo     = 'delphinus/vim-solarized8'
rev      = 'feature/custom'
hook_add = ''' "{{{
  let g:solarized_diffmode = 'normal'
  let g:solarized_enable_extra_hi_groups = 1
  let g:solarized_visibility = 'normal'
  let g:solarized_term_italics = 1
"}}} '''

[[plugins]]
#repo = 'arcticicestudio/nord-vim'
repo = 'delphinus/nord-vim'
rev  = 'feature/custom'
hook_add = '''
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1
  let g:nord_uniform_diff_background = 1
  let g:nord_cursor_line_number_background = 1
"}}} '''

# syntax {{{
[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_post_source = '''
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 0
'''

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'delphinus/vim-toml-dein'


[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'isobit/vim-caddyfile'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = ''' "{{{
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 2
"}}} '''

[[plugins]]
repo = 'digitaltoad/vim-jade'

[[plugins]]
repo = 'isRuslan/vim-es6'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'motemen/xslate-vim'

[[plugins]]
repo = 'moznion/vim-cpanfile'

# }}}

# filetype {{{
[[plugins]]
repo   = 'ap/vim-css-color'
merged = 0

[[plugins]]
repo = 'asciidoc/vim-asciidoc'

[[plugins]]
repo = 'delphinus/vim-rails'
rev  = 'feature/recognize-ridgepole'

[[plugins]]
repo = 'delphinus/vim-firestore'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
hook_add = '''
  augroup DetectCSON
    autocmd!
    autocmd BufNewFile,BufRead *.cson set filetype=coffee
  augroup END
'''

[[plugins]]
repo = 'jason0x43/vim-js-indent'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo     = 'pearofducks/ansible-vim'
hook_add = '''
  let g:ansible_name_highlight = 'b'
  let g:ansible_extra_keywords_highlight = 1
'''

[[plugins]]
repo     = 'posva/vim-vue'
hook_add = '''
  augroup FileTypeVueIsKeyword
    autocmd!
    autocmd FileType vue setlocal iskeyword+=$ | setlocal iskeyword+=-
  augroup END
'''

[[plugins]]
repo = 'tmux-plugins/vim-tmux'
# }}}

# vim-script {{{
[[plugins]] # 色をハイライトさせる
repo = 'vim-scripts/HiColors'

[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''let g:autodate_format = '%FT%T%z' '''

[[plugins]]
repo = 'vim-scripts/fontforge_script.vim'
[[plugins]]
repo = 'vim-scripts/auto_autoread.vim'

# }}}

# dependencies {{{
[[plugins]]
repo = 'inkarkat/vim-ingo-library'

[[plugins]]
repo = 'kana/vim-textobj-user'
# }}}

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = ''' "{{{
" 行の最初の文字の前にコメント文字をトグル
nmap <Leader>, <Plug>(caw:hatpos:toggle)
vmap <Leader>, <Plug>(caw:hatpos:toggle)
" 行頭にコメントをトグル
nmap <Leader>c <Plug>(caw:zeropos:toggle)
vmap <Leader>c <Plug>(caw:zeropos:toggle)
"}}} '''
# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# 使用可能な引用符など',",[],{},(),その他htmlタグ
# example: 選択した部分を変更する
# S' : 選択したテキストを'で囲む
# S<b> : 選択したテキストを<b>で囲む
# example: 'や{の間にカーソルがある時
# ds': カーソル前後の''を消す
# dst: htmlタグを消す
# cs'": カーソル前後の''を""に置換する
# cs"<b>: カーソル前後の""を<b>に置換する
# example: ノーマルモードでテキスト選択と置換
# ysaw(: 1単語を()で囲む
# This is 'a surrounded text'. -> This is 'a ( surrounded ) text'.
# ysi'(:
# This is 'a surrounded text'. -> This is '( a surrounded text )'.
# ysa'(: This is 'a surrounded text'. -> This is( 'a surrounded text' ).
# }}}
# NERD Tree {{{
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeMouseMode=2
let g:NERDTreeDirArrows=0
let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeBookmarksFile=''
" nnoremap <C-n> :NERDTreeToggle<CR>
" Auto-close nerdtree window
" autocmd MyAutoCmd WinEnter * if (winnr('$') == 1) && (&filetype == 'nerdtree') && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 0 | quit | endif
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
on_ft = 'nerdtree'
depends = 'nerdtree'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
nmap <C-n> <plug>NERDTreeTabsToggle<CR>
'''
# }}}
# undotree.vim {{{
[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
let g:undotree_WindowLayout = 2         " undotreeは左側/diffは下にウィンドウ幅で表示
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SplitWidth = 30          " undotreeのウィンドウ幅
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
" let g:undotree_DiffAutoOpen = 1         " diffウィンドウは起動時無効
let g:undotree_DiffpanelHeight = 8      " diffウィンドウの行数
let g:undotree_HighlightChangedText = 1 " 変更箇所のハイライト
" undotreeをトグル表示
noremap <C-u> :UndotreeToggle<CR>

" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''
# }}}
