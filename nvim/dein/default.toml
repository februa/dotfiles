[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'
hook_source = 'let g:vimproc#download_windows_dll = 1'
hook_post_update = ''' "{{{
  if has('win32')
    let cmd = 'mingw32-make -f make_mingw32.mak'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
"}}} '''

[[plugins]]
repo     = 'airblade/vim-gitgutter'
hook_add = ''' "{{{
  set updatetime=100
  let g:gitgutter_diff_args='-w --indent-heuristic'
  let g:gitgutter_highlight_lines = 0
  let g:gitgutter_sign_added='✓'
  let g:gitgutter_sign_modified='⤷'
  let g:gitgutter_sign_removed='✗'
  let g:gitgutter_sign_removed_first_line='↑'
  let g:gitgutter_sign_modified_removed='•'
  let g:gitgutter_terminal_reports_focus=0
  let g:gitgutter_max_signs = 1000
"}}} '''
hook_post_source = ''' "{{{
    hi GitGutterAddLine ctermbg=233 guibg=#122b0c
    hi GitGutterChangeLine ctermbg=236 guibg=#342e0e
    hi GitGutterDeleteLine ctermbg=235 guibg=#4e2728
"}}} '''

[[plugins]]
repo     = 'delphinus/lightline-delphinus'
depends  = ['lightline', 'ale', 'tagbar', 'vim-gitgutter']
hook_add = ''' "{{{
  let g:use_solarized = 1
  let g:lightline_delphinus_use_powerline_glyphs = 1
  let g:lightline_delphinus_use_nerd_fonts_glyphs = 1
  let g:lightline_delphinus_tagbar_enable = 1
  let g:lightline_delphinus_gitgutter_enable = 1

  function! s:lightline_start() abort
    let g:lightline_delphinus_colorscheme = g:use_solarized || g:colors_name =~# '^solarized' ? 'solarized_improved' : 'nord_improved'
    " execute codes below only after loading lightline because this function
    " will be called BEFORE it. Strange.
    if !get(g:, 'loaded_lightline', 0)
      return
    endif
    let path = dein#get('lightline-delphinus').path
    " source this always to detect 'background'
    execute 'source' path . '/autoload/lightline/colorscheme/' . g:lightline.colorscheme . '.vim'
    let g:lightline.colorscheme = g:lightline_delphinus_colorscheme

    " https://github.com/itchyny/lightline.vim/issues/241#issuecomment-322033789
    call lightline#init()
    call lightline#colorscheme()
    call lightline#update()
  endfunction

  " s:lightline_start will be called in changing colorscheme or 'background'
  augroup LightlineStart
    autocmd!
    autocmd ColorScheme * call <SID>lightline_start()
  augroup END
"}}} '''

[[plugins]]
repo     = 'itchyny/lightline.vim'

[[plugins]]
repo     = 'majutsushi/tagbar'
hook_add = ''' "{{{
  let g:tagbar_left = 0
  let g:tagbar_autoclose = 0
  let g:tagbar_autofocus = 1
  let g:tagbar_show_linenumbers = 0
  let g:tagbar_iconchars = [nr2char(0xe5ff) . ' ', nr2char(0xe5fe) . ' '] "  , 
  let g:tagbar_autopreview = 0
  augroup TagbarWindow
    autocmd!
    autocmd BufWinEnter * if &previewwindow | setlocal nonumber norelativenumber | endif
  augroup END
  nmap <C-t> :<C-u>TagbarToggle<CR>
"}}} '''

[[plugins]]
repo     = 'w0rp/ale'
hook_add = ''' "{{{
" nr2char(...) is for describing icons from devicons
let g:ale_echo_msg_error_str = nr2char(0xf421) . ' '
let g:ale_echo_msg_warning_str = nr2char(0xf420) . ' '
let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' '
let g:ale_echo_msg_format = '%severity%  %linter% - %s'
let g:ale_sign_column_always = 1
let g:ale_sign_error = g:ale_echo_msg_error_str
let g:ale_sign_warning = g:ale_echo_msg_warning_str
let g:ale_statusline_format = [
      \ g:ale_echo_msg_error_str . ' %d',
      \ g:ale_echo_msg_warning_str . ' %d',
      \ nr2char(0xf4a1) . '  ']
  let g:ale_fix_on_save = 1
  let g:ale_completion_enabled = 1
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_sh_shellcheck_options = '-x'
  let g:ale_cpp_clangd_options = '-compile-commands-dir=' . getcwd()
  let g:ale_fixers = {
        \ 'c': ['clang-format'],
        \ 'cpp': ['clang-format'],
        \ 'python': [ 'autopep8','black', 'isort' ],
        \ }
  let g:ale_linters = {
        \ 'c': ['clang'],
        \ 'cpp': ['clang-check'],
        \ 'vim': [ 'vint' ],
        \ 'python': ['pylint'],
        \ 'tex': ['textlint'],
        \ }

  nmap <silent> <A-K> <Plug>(ale_previous_wrap)
  nmap <silent> <A-J> <Plug>(ale_next_wrap)
  augroup DisableALEInDiffBuffers
    autocmd!
    autocmd VimEnter,FilterWritePre * ALEDisableBuffer
  augroup END
  augroup DisableALEInDtsFiles
    autocmd!
    autocmd BufRead,BufNewFile *.d.ts ALEDisableBuffer
    autocmd BufRead,BufNewFile *.d.ts.map ALEDisableBuffer
  augroup END
'''
hook_post_update = '''
  !python3 -m pip install -U --user black vint isort pylint autopep8
'''
# }}}

# basic {{{
[[plugins]]
repo     = 'airblade/vim-rooter'

[[plugins]]
repo = 'delphinus/vim-auto-cursorline'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'tpope/vim-surround'
# how to {{{
# 使用可能な引用符など',",[],{},(),その他htmlタグ
# example: 選択した部分を変更する
# S' : 選択したテキストを'で囲む
# S<b> : 選択したテキストを<b>で囲む
# example: 'や{の間にカーソルがある時
# ds': カーソル前後の''を消す
# dst: htmlタグを消す
# cs'": カーソル前後の''を""に置換する
# cs"<b>: カーソル前後の""を<b>に置換する
# example: ノーマルモードでテキスト選択と置換
# ysaw(: 1単語を()で囲む
# This is 'a surrounded text'. -> This is 'a ( surrounded ) text'.
# ysi'(:
# This is 'a surrounded text'. -> This is '( a surrounded text )'.
# ysa'(: This is 'a surrounded text'. -> This is( 'a surrounded text' ).
# }}}

# vim-autoclose
[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'LeafCage/foldCC'
hook_add = '''set foldtext=FoldCCtext()'''

# vim-autosave {{{
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_no_updatetime = 1
let g:auto_save_silent = 1
'''
# }}}

[[plugins]]
repo     = 'kana/vim-submode'
hook_add = ''' "{{{

"}}} '''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo     = 'ryanoasis/vim-devicons'
hook_add = ''' "{{{
  " U+E287 =>  :
  " U+E601 =>  :
  " U+E60E =>  :
  " U+E769 =>  :
  " U+E7C4 =>  :
  " U+F07B =>  :
  " U+F542 =>  :
  " overwrite setting for 'vue' to use U+F542
  " file-icons
  let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
        \ 'fcgi':     nr2char(0xe769),
        \ 'perl':     nr2char(0xe769),
        \ 'sqlite':   nr2char(0xe7c4),
        \ 'tt':       nr2char(0xe60e),
        \ 'txt':      nr2char(0xe601),
        \ 'vue':      nr2char(0xf542),
        \ 'html':     '',
        \ 'css':      '',
        \ 'md':       ''
        \ }
  " vim-devicons
  let g:webdevicons_conceal_nerdtree_brackets = 1
  let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

  " dir-icons
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  let g:DevIconsEnableFoldersOpenClose = 1
  let g:DevIconsDefaultFolderOpenSymbol = ''
  let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = nr2char(0xe287)
  let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = nr2char(0xf07b)
"}}} '''

[[plugins]]
repo     = 'tpope/vim-fugitive'
hook_add = ''' "{{{
  nnoremap git :<c-u>Git
  nnoremap g<space> :<c-u>Git
  nnoremap d< :diffget //2<CR>
  nnoremap d> :diffget //3<CR>
  nnoremap gs :Gstatus<CR>
  nnoremap gc :Gbrowse<CR>
  vnoremap gc :Gbrowse<CR>
  nnoremap gd :Gdiff<CR>
  nnoremap gb :Gblame<CR>
  nnoremap gl :Glog<CR>
"}}} '''

# vim-fugitiveの拡張
# :Gbrouseをすると該当のファイルをブラウザで開く
[[plugins]]
repo    = 'tpope/vim-rhubarb'
depends = ['fugitive']
# setting exists in .vimrc-local

[[plugins]]
repo = 'tpope/vim-repeat'


[[plugins]]
repo     = 'wincent/terminus'
hook_add = '''
"   - 0: "block" shape
"   - 1: "bar" shape
"   - 2: "underline" shape
let g:TerminusNormalCursorShape = 0
let g:TerminusInsertCursorShape = 1
let g:TerminusReplaceCursorShape = 2
''' 

[[plugins]]  # j,k キーでカーソル移動の高速化
repo = 'rhysd/accelerated-jk'
hook_add = '''
" j,kにキーマッピング
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''
# }}}

# colorscheme {{{
[[plugins]] # カラースキーマ
repo = 'tomasr/molokai'
[[plugins]]
repo = 'raphamorim/lucario'
[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
'''

[[plugins]]
repo     = 'lifepillar/vim-solarized8'
# repo     = 'delphinus/vim-solarized8'
# rev      = 'feature/custom'
hook_add = ''' "{{{
  let g:solarized_diffmode = 'normal'
  let g:solarized_enable_extra_hi_groups = 1
  let g:solarized_visibility = 'normal'
  let g:solarized_term_italics = 1
"}}} '''

[[plugins]]
repo = 'arcticicestudio/nord-vim'
hook_add = '''
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1
  let g:nord_uniform_diff_background = 1
  let g:nord_cursor_line_number_background = 1
"}}} '''

# filetype syntax {{{
[[plugins]]
repo = 'bfrg/vim-cpp-modern'
on_ft = ['cpp']
hook_post_source = ''' "{{{
" Disable function highlighting (affects both C and C++ files)
let g:cpp_no_function_highlight = 1

" Put all standard C and C++ keywords under Vim's highlight group `Statement`
" (affects both C and C++ files)
let g:cpp_simple_highlight = 1

" Enable highlighting of named requirements (C++20 library concepts)
let g:cpp_named_requirements_highlight = 1
"}}} '''

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'delphinus/vim-toml-dein'
on_ft = ['toml']

[[plugins]]
repo   = 'pboettch/vim-cmake-syntax'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['Dockerfile']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = ''' "{{{
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 2
"}}} '''
# }}}

# vim-tmux {{{
[[plugins]]
repo = 'tmux-plugins/vim-tmux'
[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
let g:tmuxline_preset = {
  \'a'    : '#S',
  \'c'    : '#(whoami)',
  \'win'  : ['#I', '#W'],
  \'cwin' : ['#I', '#W'],
  \'x'    : '#{?client_prefix,#[reverse],} prefix key #[default]',
  \'y'    : ['%R', '%m/%d(%a)'],
  \'z'    : '#H'}
let g:tmuxline_separators = {
    \ 'left' : '',
    \ 'left_alt': '',
    \ 'right' : '',
    \ 'right_alt' : '',
    \ 'space' : ' '}
let g:tmuxline_status_justify = 'left'
'''
# }}}

# vim-script {{{
[[plugins]] # 色をハイライトさせる
repo = 'vim-scripts/HiColors'
[[plugins]]
repo = 'vim-scripts/autodate.vim'
hook_add = '''let g:autodate_format = '%FT%T%z' '''
[[plugins]]
repo = 'vim-scripts/fontforge_script.vim'
[[plugins]]
repo = 'vim-scripts/auto_autoread.vim'
# }}}
# vim-jp {{{
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
[[plugins]]
repo = 'vim-jp/syntax-vim-ex'
#}}}
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = ''' "{{{
" 行の最初の文字の前にコメント文字をトグル
nmap <Leader>, <Plug>(caw:hatpos:toggle)
vmap <Leader>, <Plug>(caw:hatpos:toggle)
" 行頭にコメントをトグル
nmap <Leader>c <Plug>(caw:zeropos:toggle)
vmap <Leader>c <Plug>(caw:zeropos:toggle)
"}}} '''
[[plugins]]
repo = 'tpope/vim-surround'
# how to surrounded {{{
# 使用可能な引用符など',",[],{},(),その他htmlタグ
# example: 選択した部分を変更する
# S' : 選択したテキストを'で囲む
# S<b> : 選択したテキストを<b>で囲む
# example: 'や{の間にカーソルがある時
# ds': カーソル前後の''を消す
# dst: htmlタグを消す
# cs'": カーソル前後の''を""に置換する
# cs"<b>: カーソル前後の""を<b>に置換する
# example: ノーマルモードでテキスト選択と置換
# ysaw(: 1単語を()で囲む
# This is 'a surrounded text'. -> This is 'a ( surrounded ) text'.
# ysi'(:
# This is 'a surrounded text'. -> This is '( a surrounded text )'.
# ysa'(: This is 'a surrounded text'. -> This is( 'a surrounded text' ).
# }}}
# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = ''' "{{{
# let g:NERDTreeWinPos = "right"
# let g:NERDTreeShowBookmarks=1
# let g:NERDTreeShowHidden=1
# let g:NERDTreeQuitOnOpen=1
# let g:NERDTreeMouseMode=2
# let g:NERDTreeDirArrows=0
# let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
# let g:NERDTreeBookmarksFile=''
# nmap <C-n> :<C-u>NERDTreeToggle<CR>
# "}}} '''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = ''' "{{{
let g:undotree_WindowLayout = 3
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SplitWidth = 30          " undotreeのウィンドウ幅
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
let g:undotree_DiffpanelHeight = 8      " diffウィンドウの行数
let g:undotree_HighlightChangedText = 1 " 変更箇所のハイライト
" undotreeをトグル表示
noremap <C-u> :UndotreeToggle<CR>

" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
"}}} '''

[[plugins]]
repo = 'Yggdroot/indentLine'

# dependencies {{{
[[plugins]]
repo = 'inkarkat/vim-ingo-library'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
# }}}

