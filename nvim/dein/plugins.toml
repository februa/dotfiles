[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'
hook_source = '''
if has('win64')
    let g:vimproc#download_windows_dll = 1
endif
'''
hook_post_update = '''
  if has('win32')
    let cmd = 'mingw32-make -f make_mingw32.mak'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''
[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
" 行の最初の文字の前にコメント文字をトグル
nmap <Leader>, <Plug>(caw:hatpos:toggle)
vmap <Leader>, <Plug>(caw:hatpos:toggle)
" 行頭にコメントをトグル
nmap <Leader>c <Plug>(caw:zeropos:toggle)
vmap <Leader>c <Plug>(caw:zeropos:toggle)
'''

# vim-autoclose
[[plugins]]
repo = 'Townk/vim-autoclose'

# vim-autosave {{{
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:auto_save_no_updatetime = 1
let g:auto_save_silent = 1
'''
# }}}

[[plugins]]  # j,k キーでカーソル移動の高速化
repo = 'rhysd/accelerated-jk'
hook_add = '''
" j,kにキーマッピング
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]  # sキーで特定文字へカーソルジャンプ
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0
let g:EasyMotion_keys = 'ASDFGHJKL'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
nmap sf <Plug>(easymotion-s2)
xmap sf <Plug>(easymotion-s2)
omap sf <Plug>(easymotion-s2)
'''
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nmap <silent> gs :<C-u>Gstatus<CR>
nmap <silent> gd :<C-u>Gdiff<CR>
nmap <silent> gb :<C-u>Gblame<CR>
nmap <silent> gl :<C-u>Glog<CR>
'''
[[plugins]]
repo = 'airblade/vim-gitgutter'

# vim-surround {{{
[[plugins]]
repo = 'tpope/vim-surround'
# 使用可能な引用符など',",[],{},(),その他htmlタグ
# example: 選択した部分を変更する
# S' : 選択したテキストを'で囲む
# S<b> : 選択したテキストを<b>で囲む
# example: 'や{の間にカーソルがある時
# ds': カーソル前後の''を消す
# dst: htmlタグを消す
# cs'": カーソル前後の''を""に置換する
# cs"<b>: カーソル前後の""を<b>に置換する
# example: ノーマルモードでテキスト選択と置換
# ysaw(: 1単語を()で囲む
# This is 'a surrounded text'. -> This is 'a ( surrounded ) text'.
# ysi'(:
# This is 'a surrounded text'. -> This is '( a surrounded text )'.
# ysa'(: This is 'a surrounded text'. -> This is( 'a surrounded text' ).
# }}}
# NERD Tree {{{
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeMouseMode=2
let g:NERDTreeDirArrows=0
let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeBookmarksFile=''
" nnoremap <C-n> :NERDTreeToggle<CR>
" Auto-close nerdtree window
" autocmd MyAutoCmd WinEnter * if (winnr('$') == 1) && (&filetype == 'nerdtree') && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 0 | quit | endif
'''
[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
on_ft = 'nerdtree'
depends = 'nerdtree'
hook_add = '''
let g:NERDTreeLimitedSyntax = 1
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
nmap <C-n> <plug>NERDTreeTabsToggle<CR>
'''
# }}}
# undotree.vim {{{
[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
let g:undotree_WindowLayout = 2         " undotreeは左側/diffは下にウィンドウ幅で表示
let g:undotree_ShortIndicators = 1      " 時間単位は短く表示
let g:undotree_SplitWidth = 30          " undotreeのウィンドウ幅
let g:undotree_SetFocusWhenToggle = 1   " undotreeを開いたらフォーカスする
" let g:undotree_DiffAutoOpen = 1         " diffウィンドウは起動時無効
let g:undotree_DiffpanelHeight = 8      " diffウィンドウの行数
let g:undotree_HighlightChangedText = 1 " 変更箇所のハイライト
" undotreeをトグル表示
noremap <C-u> :UndotreeToggle<CR>

" undotreeバッファ内でのキーバインド設定
function! g:Undotree_CustomMap()
    map <silent> <buffer> <Esc> q
    map <silent> <buffer> h ?
endfunction
'''
# }}}
