[[plugins]]
repo     = 'Shougo/denite.nvim'
on_cmd   = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord']
on_func  = ['denite#']
depends  = ['fruzzy']
hook_add = ''' "{{{
  nnoremap <silent> sN :<C-u>DeniteBufferDir file/rec<CR>
  nnoremap <silent> s; :<C-u>Denite buffer<CR>
  nnoremap <silent> sm :<C-u>Denite buffer file/old<CR>
  nnoremap <silent> s/ :<C-u>Denite -buffer-name=search%`bufnr('%')` line<CR>
  nnoremap <silent> sr :<C-u>Denite -resume<CR>
  nnoremap <silent> sy :<C-u>Denite yankround<CR>

  if has('nvim')
    autocmd BufEnter \[denite\] call s:denite_change_cursorline()
    function! s:denite_change_cursorline() abort
      let output = execute('hi Cursorline')
      let guibg = matchstr(output, '\(guibg=\)\@<=#[a-zA-Z0-9]\+')
      hi CursorLine guibg=#183203
      execute 'autocmd BufLeave <buffer> hi Cursorline guibg=' . guibg
    endfunction
  endif
"}}} '''

hook_post_source = ''' "{{{
  " from doc
  function! s:candidate_grep(context) abort
    let path = a:context['targets'][0]['action__path']
    let dir = denite#util#path2directory(path)
    let sources_queue = a:context['sources_queue'] + [[
          \ {'name': 'grep', 'args': [path, '', '!']},
          \ ]]
    return {'is_interactive': v:false, 'sources_queue': sources_queue}
  endfunction

  function! s:narrow_grep(context, ...) abort
    let sources = get(a:context, 'sources', [])
    let filtered = filter(copy(sources),
          \ {i, v -> get(v, 'name', '') ==# 'grep'})
    if len(filtered) == 0
      call denite#util#print_error('current sources does not include `grep`.')
      return
    endif
    let args = get(filtered[0], 'args', [])
    let path = get(args, 0, '')
    let opt = get(args, 1, '')
    let input = get(a:context, 'input', '')
    let pattern = substitute(input, '\s\+', '.*', 'g')
    let sources_queue = a:context['sources_queue'] + [[
          \ {'name': 'grep', 'args': [path, opt, pattern]},
          \ ]]
    return {'sources_queue': sources_queue}
  endfunction

  if executable('gtags')
    call denite#custom#var('outline', 'command', ['gtags'])
    call denite#custom#var('outline', 'options', [])
  endif

  " Use fd for finding files
  call denite#custom#action('buffer,directory,file,openable', 'grep', function('s:candidate_grep'))
  call denite#custom#action('file', 'grep', function('s:narrow_grep'))

  call denite#custom#source('grep', 'args', ['', '', '!'])
  call denite#custom#source('grep', 'converters', ['converter/abbr_word'])

  call denite#custom#source('line', 'matchers', ['matcher_fuzzy'])
  call denite#custom#source('file/rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
  call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ [
      \ '.git/', 'build/', 'dataset/', '__pycache__/',
      \ 'images/', '*.o', '*.make',
      \ '*.min.*',
      \ 'img/', 'fonts/'])

  " ref. https://github.com/arcticicestudio/nord-vim/issues/79
  call denite#custom#option('_', {
        \ 'cached_filter': v:true,
        \ 'cursor_shape': v:true,
        \ 'cursor_wrap': v:true,
        \ 'highlight_filter_background': 'DeniteFilter',
        \ 'highlight_matched_char': 'Underlined',
        \ 'matchers': 'matcher/fruzzy',
        \ 'prompt': '>>> ',
        \ })

  function! s:denite_detect_size() abort
    let s:denite_winheight = 20
    let s:denite_winrow = &lines > s:denite_winheight ? (&lines - s:denite_winheight) / 2 : 0
    let s:denite_winwidth = &columns > 240 ? &columns / 2 : 120
    let s:denite_wincol = &columns > s:denite_winwidth ? (&columns - s:denite_winwidth) / 2 : 0
    call denite#custom#option('_', {
          \ 'wincol': s:denite_wincol,
          \ 'winheight': s:denite_winheight,
          \ 'winrow': s:denite_winrow,
          \ 'winwidth': s:denite_winwidth,
          \ })
  endfunction

  augroup denite-detect-size
    autocmd!
    autocmd VimResized * call <SID>denite_detect_size()
  augroup END

  call denite#custom#option('denite-z', 'default_action', 'narrow')

"}}} '''

[plugins.ftplugin]
denite = ''' "{{{
  let b:auto_cursorline_disabled = 1
  nnoremap <silent><buffer> <C-j> j
  nnoremap <silent><buffer> <C-k> k
  nnoremap <silent><buffer><expr> <BS>    denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> <C-a>   denite#do_map('do_action', 'my_file_rec')
  nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-g>   denite#do_map('do_action', 'grep')
  nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> <C-x>   denite#do_map('do_action', 'quick_move')
  nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q       denite#do_map('quit')
"}}} '''
denite-filter = ''' "{{{
  let b:auto_cursorline_disabled = 1
  inoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
"}}} '''

# denite extra sources
[[plugins]]
repo      = 'Jagua/vim-denite-ghq'
on_source = ['denite.nvim']
[[plugins]]
repo      = 'neoclide/denite-git'
on_source = ['denite.nvim']
depends   = ['vim-easygit']
[[plugins]]
repo = 'rafi/vim-denite-z'
on_source = ['denite.nvim']
[[plugins]]
repo = 'ozelentok/denite-gtags'
on_source = ['denite.nvim']
on_if = '''executable('gtags')'''
hook_add = '''
nnoremap <leader>d :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
'''

# dependencies {{{
[[plugins]]
repo = 'neoclide/vim-easygit'

[[plugins]]
repo      = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_add  = '''
  let g:fruzzy#usenative = 0
  let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'
# }}}
