# on_event {{{
[[plugins]]
repo     = 'itchyny/vim-cursorword'
on_event = ['FocusLost', 'CursorHold']

[[plugins]]
repo        = 'itchyny/vim-parenmatch'
on_event    = ['FocusLost', 'CursorHold']
hook_source = 'let g:loaded_matchparen = 1'
hook_post_source = 'call parenmatch#highlight()'

[[plugins]]
repo     = 'lambdalisue/suda.vim'
on_event = ['VimEnter']
hook_source = '''
  let g:suda_startup = 0
  let g:suda#prefix = 'sudo:'
  " do here instead of setting suda_smart_edit
  augroup suda_smart_edit
    autocmd!
    autocmd BufEnter * nested call suda#BufEnter()
  augroup END
'''
hook_post_source = '''
  call suda#init('sudo:*,sudo:*/*')
'''

[[plugins]]
repo    = 'machakann/vim-highlightedyank'
on_event = ['TextYankPost']

[[plugins]]
repo     = 'thinca/vim-visualstar'
on_event = ['FocusLost', 'CursorHold']
# }}}

# on_map {{{
[[plugins]]
#repo     = 'LeafCage/yankround.vim'
repo      = 'delphinus/yankround.vim'
rev       = 'feature/denite'
on_source = ['denite.nvim']
on_map    = ['<Plug>(yankround-']
hook_add  = ''' "{{{
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <c-p> <Plug>(yankround-prev)
  nmap <expr><c-n> yankround#is_active() ? "\<Plug>(yankround-next)" : "\<Plug>DWMNew"
"}}} '''

[[plugins]]
repo     = 'arecarn/vim-fold-cycle'
on_map   = ['<Plug>(fold-cycle-']
hook_add = ''' "{{{
  nmap <CR> <Plug>(fold-cycle-open)
  nmap <C-h> <Plug>(fold-cycle-close)
"}}} '''

[[plugins]]
repo     = 'chikatoike/concealedyank.vim'
on_map   = ['<Plug>(operator-concealedyank)']
hook_add = 'xmap Y <Plug>(operator-concealedyank)'

[[plugins]]
repo      = 'delphinus/dwm.vim'
rev       = 'feature/disable'
on_map    = ['<Plug>DWM']
hook_add  = ''' "{{{
  function! s:dwm_reset_pane_width() abort
    if !exists('*DWM_ResizeMasterPaneWidth')
      return
    endif
    let half = &columns / 2
    let min_width = get(g:, 'dwm_min_master_pane_width', 9999)
    let g:dwm_master_pane_width = min([min_width, half])
    call DWM_ResizeMasterPaneWidth()
  endfunction

  function! s:dwm_disable() abort
    autocmd! dwm BufWinEnter
    augroup! dwm
  endfunction

  function! s:dwm_enable() abort
    augroup dwm
      autocmd!
      autocmd! BufWinEnter * if &buflisted || &filetype ==# 'help' | call DWM_AutoEnter() | endif
    augroup END
  endfunction

  nnoremap <C-J> <C-W>w
  nnoremap <C-K> <C-W>W
  nmap <C-S> <Plug>DWMRotateClockwise
  nmap <C-Q> <Plug>DWMRotateCounterclockwise
  nmap <C-N> <Plug>DWMNew
  nmap <C-C> <Plug>DWMClose
  nmap <C-Space> <Plug>DWMFocus
  nmap <C-@> <Plug>DWMFocus
  nmap <C-L> <Plug>DWMGrowMaster

  command! DWMResetPaneWidth call <SID>dwm_reset_pane_width()
  command! DWMDisable call <SID>dwm_disable()
  command! DWMEnable call <SID>dwm_enable()
"}}} '''
hook_source = 'let g:dwm_min_master_pane_width = 86'

[[plugins]]
repo   = 'deton/jasegment.vim'
on_map = ['<Plug>JaSegment']
hook_add = ''' "{{{
  let g:jasegment_no_default_key_mappings = 1
  " Use `1` to define buffer-specific autocmd
  let g:jasegment#highlight = 1
  function! s:jasegment_my_settings() abort
    augroup JaSegmentHighlight
      autocmd!
      autocmd InsertLeave <buffer> call jasegment#OnInsertLeave()
    augroup END
    nmap <silent><buffer> e <Plug>JaSegmentMoveNE
    nmap <silent><buffer> w <Plug>JaSegmentMoveNW
    nmap <silent><buffer> b <Plug>JaSegmentMoveNB
    omap <silent><buffer> e <Plug>JaSegmentMoveOE
    omap <silent><buffer> w <Plug>JaSegmentMoveOW
    omap <silent><buffer> b <Plug>JaSegmentMoveOB
    xmap <silent><buffer> e <Plug>JaSegmentMoveVE
    xmap <silent><buffer> w <Plug>JaSegmentMoveVW
    xmap <silent><buffer> b <Plug>JaSegmentMoveVB
    omap <silent><buffer> aw <Plug>JaSegmentTextObjA
    omap <silent><buffer> iw <Plug>JaSegmentTextObjI
    xmap <silent><buffer> aw <Plug>JaSegmentTextObjVA
    xmap <silent><buffer> iw <Plug>JaSegmentTextObjVI
  endfunction
  autocmd FileType markdown call s:jasegment_my_settings()
  autocmd BufNewFile,BufRead *.txt call s:jasegment_my_settings()
  command JaSegmentEnable call <SID>jasegment_my_settings()
"}}} '''

[[plugins]]
repo     = 'iamcco/markdown-preview.vim'
on_map   = ['<Plug>MarkdownPreview', '<Plug>StopMarkdownPreview']
hook_source = '''
  let g:mkdp_path_to_chrome = 'open -a Safari'
'''

[plugins.ftplugin]
markdown = ''' "{{{
  nmap <buffer> <A-m> <Plug>MarkdownPreview
  nmap <buffer> <A-M> <Plug>StopMarkdownPreview
  nmap <buffer> µ <Plug>MarkdownPreview
  nmap <buffer> Â <Plug>StopMarkdownPreview
"}}} '''

[[plugins]]
repo        = 'junegunn/vim-easy-align'
on_map      = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
hook_add    = ''' "{{{
  vmap <Enter>           <Plug>(EasyAlign)
  nmap <Leader>a         <Plug>(EasyAlign)
  vmap <Leader><Enter>   <Plug>(LiveEasyAlign)
  nmap <Leader><Leader>a <Plug>(LiveEasyAlign)
"}}} '''
hook_source = ''' "{{{
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '/': { 'pattern': '//\+\|/\*\|\*/', 'ignore_groups': ['String'] },
        \ '#': { 'pattern': '#\+', 'ignore_groups': ['String'], 'delimiter_align': 'l' },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'd': {
        \     'pattern': ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin': 0,
        \     'right_margin': 0
        \   }
        \ }
"}}} '''

[[plugins]]
repo     = 't9md/vim-quickhl'
on_map   = ['<Plug>(quickhl-', '<Plug>(operator-quickhl-']
hook_add = ''' "{{{
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>t <Plug>(quickhl-manual-toggle)
  xmap <Space>t <Plug>(quickhl-manual-toggle)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
  nmap <Space>j <Plug>(quickhl-cword-toggle)
  nmap <Space>] <Plug>(quickhl-tag-toggle)
  map  <Space>H <Plug>(operator-quickhl-manual-this-motion)
"}}} '''

[[plugins]]
repo     = 't9md/vim-choosewin'
on_map   = ['<Plug>(choosewin)']
hook_add = 'nmap \ <Plug>(choosewin)'
hook_source = '''
  let g:choosewin_statusline_replace = 0
  let g:choosewin_overlay_enable = 1
'''

[[plugins]]
repo     = 'easymotion/vim-easymotion'
on_cmd   = ['EMCommandLineMap', 'EMCommandLineNoreMap', 'EMCommandLineUnMap']
on_map   = ['<Plug>(easymotion-']
hook_add = ''' "{{{
  map ' <Plug>(easymotion-prefix)
  nmap sf <Plug>(easymotion-overwin-f2)
  xmap sf <Plug>(easymotion-s2)
  omap sf <Plug>(easymotion-s2)
"}}} '''
hook_source = ''' "{{{
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_keys = 'hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
  let g:EasyMotion_grouping =1
  let g:EasyMotion_use_migemo = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_startofline = 0
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_enter_jump_first = 1
"}}} '''

[[plugins]]
repo    = 'inkarkat/vim-LineJuggler'
depends = [
  'vim-repeat',
  'vim-ingo-library',
  'visualrepeat',
]
on_map   = ['<Plug>(LineJuggler']
hook_add = ''' "{{{
  xmap [d       <Plug>(LineJugglerDupOverUp)
  nmap [d       <Plug>(LineJugglerDupOverUp)
  xmap [E       <Plug>(LineJugglerSwapUp)
  nmap [E       <Plug>(LineJugglerSwapUp)
  xmap [e       <Plug>(LineJugglerMoveUp)
  nmap [e       <Plug>(LineJugglerMoveUp)
  xmap [<Space> <Plug>(LineJugglerBlankUp)
  nmap [<Space> <Plug>(LineJugglerBlankUp)
  xmap ]d       <Plug>(LineJugglerDupOverDown)
  nmap ]d       <Plug>(LineJugglerDupOverDown)
  xmap ]E       <Plug>(LineJugglerSwapDown)
  nmap ]E       <Plug>(LineJugglerSwapDown)
  xmap ]e       <Plug>(LineJugglerMoveDown)
  nmap ]e       <Plug>(LineJugglerMoveDown)
  xmap ]<Space> <Plug>(LineJugglerBlankDown)
  nmap ]<Space> <Plug>(LineJugglerBlankDown)
"}}} '''
# }}}


# dependencies {{{
[[plugins]]
repo = 'vim-jp/vital.vim'
on_func = ['vital#vital#new']

[[plugins]]
repo = 'vim-scripts/visualrepeat'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'
# }}}
