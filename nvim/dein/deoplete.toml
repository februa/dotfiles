[[plugins]]
repo        = 'Shougo/deoplete.nvim'
on_event    = ['InsertEnter']
depends     = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = ''' "{{{
  let g:deoplete#enable_at_startup = 1
  inoremap <silent> <expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#manual_complete()
  inoremap <silent> <expr> <S-TAB>
        \ pumvisible() ? "\<C-p>" :
        \ <SID>check_back_space() ? "\<S-TAB>" :
        \ deoplete#manual_complete()
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
"}}} '''
hook_add = ''' "{{{
set completeopt=menuone,preview,noinsert
"}}} '''
hook_post_source = ''' "{{{
  call deoplete#custom#source('_', 'converters', [
        \ 'converter_auto_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ ])
  call deoplete#custom#source('look', 'rank', 0)
  call deoplete#custom#option({
        \ 'omni_patterns': {
        \   'go': '[^. *\t]\.\w*',
        \ },
        \ 'ignore_sources': {
        \   'denite-filter': ['look'],
        \ },
        \ 'yarp': v:true,
        \ 'smart_case': v:true,
        \ })
  call deoplete#initialize()
"}}} '''

# deopelte extra source
# file/include
[[plugins]]
repo      = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']
hook_add = ''' 
if !exists('g:neoinclude#exts')
    let g:neoinclude#exts = {}
endif
let g:neoinclude#exts.cpp = ['', 'h', 'hpp', 'hxx']
'''
# ()を自動で閉じる
[[plugins]]
repo      = 'Shougo/neopairs.vim'
on_source = ['deoplete.nvim']
# コマンドラインの補完からシグネチャを表示する
[[plugins]]
repo      = 'Shougo/echodoc.vim'
on_source = ['deoplete.nvim']
hook_source = ''' "{{{
	let g:echodoc#enable_at_startup = 0
	let g:echodoc#type = 'echo'
"}}} '''

[[plugins]]
repo = 'tbodt/deoplete-tabnine'
on_source = ['deoplete.nvim']
build = './install.sh'
hook_post_source = '''
    call deoplete#custom#var('tabnine', {
    \ 'line_limit': 500,
    \ 'max_num_results': 20,
    \ })
'''

[[plugins]]
repo = 'deoplete-plugins/deoplete-tag'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev  = 'next'
on_if = '''has("unix")'''
build = 'bash install.sh'
on_source = ['deoplete.nvim']
on_func   = [
  'LanguageClient#textDocument_definition',
  'LanguageClient#textDocument_hover',
  'LanguageClient#textDocument_rename',
  'LanguageClient#textDocument_typeDefinition',
  'LanguageClient#textDocument_formatting',
]
hook_source = ''' "{{{
  " for debugging
  " let g:LanguageClient_loggingFile = '/tmp/LanguageClient.log'
  let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd', '-compile-commands-dir=' . getcwd()],
        \ 'cpp': ['clangd', '-compile-commands-dir=' . getcwd()],
        \ 'python': ['pyls'],
        \ }
"}}} '''
hook_add = ''' "{{{ 
let g:LanguageClient_windowLogMessageLevel = "Info"
" }}} ''' 
hook_post_update = ''' "{{{
  !pip install --user python-language-server
"}}} '''

[[plugins]]
repo  = 'Shougo/neco-vim'
on_ft = ['vim']

[[plugins]]
repo      = 'wellle/tmux-complete.vim'
on_source = ['deoplete.nvim']
hook_add  = 'let g:tmuxcomplete#trigger = ""'

[[plugins]]
repo      = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'lervag/vimtex'
on_source = ['deoplete.nvim']
on_ft = 'tex'
on_if = '''has("unix") || has("mac")'''
hook_post_source = '''
call deoplete#custom#var('omni', 'input_patterns', {
    \ 'tex': g:vimtex#re#deoplete
    \})
'''
hook_add = '''
if has('mac')
  let g:vimtex_view_general_viewer='skim'
else
  let g:vimtex_view_general_viewer='evince'
endif
if has('nvim')
  let g:vimtex_compiler_progname
        \ = 'nvr'
endif
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = ['deoplete.nvim']
